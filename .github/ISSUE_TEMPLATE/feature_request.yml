name: Feature Request
description: This project thrives from differentiation from competing apps. Suggest an idea today!
title: 'Feature: '
body:

  # Tip to warn of checking for existing issues
  - type: markdown
    attributes:
      value: |
        > [!TIP]
        > Have you checked for similar feature requests? There's a possibility your suggestion is already being tracked. Please do a thorough search before creating a new issue.

  # Description
  - type: textarea
    attributes:
      label: What feature or improvement do you think would benefit the app?
      description: Please include your use case
    validations:
      required: true

  # Tooltip about requirements
  - type: markdown
    attributes:
      value: |
        Please include a list of changes required to make this improvement. A good rule of thumb is to start your proposal with no more than 7 high-level requirements.

  # Requirements
  - type: textarea
    attributes:
      label: Requirements
      description: Describe all the requirements to make your idea happen.
      value: |
        #### ðŸ“‹ High Priority
        - [ ] Something
        - [ ] Another thing
        - [ ] https://github.com/link/to/an/issue

        #### ðŸ“‹ Nice to have
        - [ ] Something
        - [ ] Another thing
        - [ ] https://github.com/link/to/an/issue
    validations:
      required: true

  # Version
  - type: input
    id: app_version
    attributes:
      label: Version
      description: Which version are you using?
      placeholder: "e.g. 0.14.0-alpha3"

  # Separator
  - type: markdown
    attributes:
      value: |
        ---

  - type: textarea
    id: api-changes
    attributes:
      label: API Changes
      description: Include a list of all API changes, additions, subtractions as would be required by your proposal. These APIs should be considered placeholders, so the naming is not as important as getting the concepts correct. If possible you should include some example (pseudo-)code of usage of your new API.
      placeholder: |
        ```csharp
        var button = new Button ();
        button.MakeShiny = true; // new API
        ```

        The MakeShiny API works even if the button is already visible.
    validations:
      required: false

  - type: textarea
    id: use-case
    attributes:
      label: Intended Use-Case
      description: Provide a detailed example of where your proposal would be used and for what purpose. Focus on _why_ you want this feature instead of _what_ the feature does.
      placeholder: I have a situation where I would really want a shiny button to make it stand out from the rest of the plain and boring buttons.
    validations:
      required: false

  # Separator
  - type: markdown
    attributes:
      value: |
        ---

  # Additional comments
  - type: textarea
    attributes:
      label: Comments
      description: Additional information, comments or screenshots about the feature request.
